from AudioTones import AudioTones
from ExcelToneLog import ExcelToneLog as ETL
import os
import matplotlib.pyplot as plt
import gc
import psutil


def write():
    log.worksheet.write(row, 0, file)
    col = 1
    for tone in a1.tones:
        log.worksheet.write(row, col, a1.start(tone, 1) + ' - ' + a1.end(tone, 1))
        log.worksheet.write(row, col + 1, a1.freq(tone, 1))
        log.worksheet.write(row, col + 2, a1.peakv(tone, 1))
        log.worksheet.write(row, col + 3, a1.rmsv(tone, 1))

        col = col + 8

    col = 1
    for tone in a1.tones2:
        log.worksheet.write(row, col + 4, a1.freq(tone, 2))
        log.worksheet.write(row, col + 5, a1.peakv(tone, 2))
        log.worksheet.write(row, col + 6, a1.rmsv(tone, 2))
        if tone in a1.tones and len(a1.tones[tone]) == 6:
            log.worksheet.write(row, col + 7, a1.phaseshiftv(tone, 2))

        col = col + 8

def plotting():
    plt.rcParams['figure.dpi'] = 100
    plt.rcParams['figure.figsize'] = (9, 7)

    if a1.channels == 2:
        plt.rcParams['agg.path.chunksize'] = 10000
        plt.subplot(2, 1, 1)
        plt.plot(a1.time, a1.s1, 'r')
        plt.xlabel("time, s [left channel]")
        plt.ylabel("signal, relative units")
        for key in a1.tones:
            seconds = a1.tones[key][1] * a1.unit
            seconds2 = a1.tones[key][2] * a1.unit
            plt.axvline(x=seconds, color='y', linewidth=0.75)
            plt.axvline(x=seconds2, color='y', linewidth=0.75)

        plt.subplot(2, 1, 2)
        plt.plot(a1.time, a1.s2, 'b')
        plt.xlabel("time, s [right channel]")
        plt.ylabel("signal, relative units")
        for key in a1.tones2:
            seconds = a1.tones2[key][1] * a1.unit
            seconds2 = a1.tones2[key][2] * a1.unit
            plt.axvline(x=seconds, color='y', linewidth=0.75)
            plt.axvline(x=seconds2, color='y', linewidth=0.75)
        plt.tight_layout()
        plt.savefig(plot_fig, dpi = 1000)
        plt.close()

    if a1.channels == 1:
        plt.rcParams['agg.path.chunksize'] = 10000
        plt.subplot(1, 1, 1)
        plt.plot(a1.time, a1.s1, 'r')
        plt.xlabel("time, s [mono channel]")
        plt.ylabel("signal, relative units")
        for key in a1.tones:
            seconds = a1.tones[key][1] * a1.unit
            seconds2 = a1.tones[key][2] * a1.unit
            plt.axvline(x=seconds, color='y', linewidth=0.75)
            plt.axvline(x=seconds2, color='y', linewidth=0.75)
        plt.savefig(plot_fig, dpi = 1000)
        plt.close()



# Ask user which directory to search
input1 = input('File path: ')
while os.path.isdir(input1) == False:
    input1 = input('Directory path not valid, please re-enter: ')
folder = str(input1)

# Count the number of files with the ".wav" extension
count = 0
for file in os.listdir(folder):
    if file.endswith(".wav"):
        count += 1

log = ETL(folder)
row = 1
fig_folder = folder + '\\' + "plotfigs"
os.makedirs(fig_folder)

# Ask user for sensitivity
input2 = input('Sensitivity (a non-zero decimal between 0 and 1; default is 0.05): ')
while float(input2) <= 0 or float(input2) >= 1:
    input2 = input('Input not valid, please re-enter: ')
s = float(input2)

input3 = input('Tone length (seconds; default is 8): ')
while input3.isdigit() == False:
    input3 = input('Input not valid, please re-enter: ')
t = int(input3)

input4 = input('Analysis length (seconds; default is 500): ')
while input4.isdigit() == False:
    input4 = input('Input not valid, please re-enter: ')
a = int(input4)

input5 = input('Plot (Y or N): ')
while input5.lower() != 'y' and input5.lower() != 'n':
    input5 = input('Input not valid, please re-enter: ')
p = input5


for file in os.listdir(folder):
    if file.__contains__(".wav"):
        #memory_usage = psutil.Process().memory_info().rss

        f = folder + '\\' + file
        plot_fig = fig_folder + "\\" + file.split(".wav")[0] + ".png"
        print(f'Analyzing {file}, #{row} of {count}')

        a1 = AudioTones(f, 0.5, s, t, a)
        #memory_usage = psutil.Process().memory_info().rss

        #print(a1.tones)
        #print(a1.tones2)
        print(f'Writing......')
        write()
        #memory_usage = psutil.Process().memory_info().rss

        if a1.tones and p.lower() == 'y':
            print(f'Plotting......')
            plotting()
            #memory_usage = psutil.Process().memory_info().rss

        row = row + 1
        del a1

        #memory_usage = psutil.Process().memory_info().rss

        gc.collect()
        #memory_usage = psutil.Process().memory_info().rss

log.workbook.close()
